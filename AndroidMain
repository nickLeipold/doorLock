package thewhispererinc.door12072016;
//created by theWhisperer, email theWhispererin@gmail.com if you have any question
// successfully working with no crashes
//finished on August 10th 2016 working with htc m8
//need to get it working with samsung, they are a pain
// August 11th, working on htc and galaxy s5
//"createBeamShareData start new" initializes on galaxy note 4 but doesnt continue after that
//"E/NFC is android beam allowed - begin" looking into this as the root of the error
//got it to work on the note 4, also have a larger antenna coming in the mail

import android.app.PendingIntent;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.nfc.NdefMessage;
import android.nfc.NdefRecord;
import android.nfc.NfcAdapter;
import android.os.Parcelable;
import android.Manifest;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.Toast;

import com.firebase.client.Firebase;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.SignInButton;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseApp;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.StringTokenizer;


public class MainActivity extends AppCompatActivity implements View.OnClickListener, GoogleApiClient.OnConnectionFailedListener {

    private NfcAdapter mNfcAdapter;
    private RadioButton radio_button;

    private NdefMessage mNdefMessage;
    private FirebaseAuth mAuth;
    private FirebaseAuth.AuthStateListener mAuthListener;
    private GoogleApiClient mGoogleApiClient;

    private String textDoor;
    private String doorHold;
    private Boolean flag;

    private final int MY_PERMISSIONS_REQUEST_READ_CONTACTS = 1;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Assume thisActivity is the current activity
        // Here, thisActivity is the current activity
        if (ContextCompat.checkSelfPermission(this,
                Manifest.permission.GET_ACCOUNTS)
                != PackageManager.PERMISSION_GRANTED ) {


            // Should we show an explanation?
            if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                    Manifest.permission.GET_ACCOUNTS) && ActivityCompat.shouldShowRequestPermissionRationale(this,
                    Manifest.permission.NFC) ) {

                // Show an explanation to the user *asynchronously* -- don't block
                // this thread waiting for the user's response! After the user
                // sees the explanation, try again to request the permission.

            } else {

                // No explanation needed, we can request the permission.
                ActivityCompat.requestPermissions(this,
                        new String[]{Manifest.permission.GET_ACCOUNTS},
                        MY_PERMISSIONS_REQUEST_READ_CONTACTS);
                ActivityCompat.requestPermissions(this,
                        new String[]{Manifest.permission.NFC},
                        MY_PERMISSIONS_REQUEST_READ_CONTACTS);

                // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an
                // app-defined int constant. The callback method gets the
                // result of the request.
            }

        }
        Firebase.setAndroidContext(this);
        setContentView(R.layout.activity_main);
        Log.d(MainActivity.class.getSimpleName(), "***********************onCreate() ********************************");
        flag = false;



        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestEmail()
                .requestIdToken(getString(R.string.default_web_client_id))
                .build();
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .enableAutoManage(this,this)
                .addApi(Auth.GOOGLE_SIGN_IN_API,gso)
                .build();

        mAuth = FirebaseAuth.getInstance();

        mAuthListener = new FirebaseAuth.AuthStateListener() {

            @Override
            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {
                FirebaseUser user = firebaseAuth.getCurrentUser();
                if(user != null){

                    // User is signed in
                    Toast.makeText(getApplicationContext(), "signed in", Toast.LENGTH_SHORT).show();
                    flag = true;
                } else {
                    // No user is signed in
                    Toast.makeText(getApplicationContext(), "not signed in", Toast.LENGTH_SHORT).show();
                }

            }
        };

        SignInButton signInButton = (SignInButton) findViewById(R.id.sign_in_button);
        signInButton.setOnClickListener(this);

        mAuth.addAuthStateListener(mAuthListener);
        mNfcAdapter = NfcAdapter.getDefaultAdapter(this);
        radio_button= (RadioButton) findViewById(R.id.radioButton5);

        /*//NdefRecord uriRecord = NdefRecord.createUri(Uri.encode("working"));
        //mNdefMessage = new NdefMessage(new NdefRecord[]{uriRecord});
        NdefRecord mimeRecord = NdefRecord.createMime("security/door",
                "Beam me up, Android".getBytes(Charset.forName("US-ASCII")));//send initial message to the arduino
        mNdefMessage = new NdefMessage(mimeRecord);
        mNfcAdapter.setNdefPushMessage(mNdefMessage,this);*/



        mNfcAdapter.setNdefPushMessageCallback(null, this);

        if(mNfcAdapter != null)
        {
            Toast.makeText(MainActivity.this,"Tap to unlock door", Toast.LENGTH_SHORT).show();
            radio_button.setEnabled(true);
            if (!(mNfcAdapter.isEnabled()))
            {

                Toast.makeText(getApplicationContext(), "Please activate NFC and press Back to return to the application!" +(mNfcAdapter.isEnabled()) , Toast.LENGTH_LONG).show();
                startActivity(new Intent(Settings.ACTION_NFC_SETTINGS));
            }
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_READ_CONTACTS: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    // permission was granted, yay! Do the
                    // contacts-related task you need to do.
                    Toast.makeText(getApplicationContext(), "Yay you granted Access", Toast.LENGTH_SHORT).show();

                } else {
                    Toast.makeText(getApplicationContext(), "Permission denied", Toast.LENGTH_SHORT).show();

                    // permission denied, boo! Disable the
                    // functionality that depends on this permission.
                }
                return;
            }

            // other 'case' lines to check for other
            // permissions this app might request
        }
    }

    @Override
    public void onStart() {
        super.onStart();
        flag = false;
        mAuth.addAuthStateListener(mAuthListener);
    }
    @Override
    public void onStop() {
        super.onStop();
        //flag = false;
        if(mAuthListener != null){
            mAuth.removeAuthStateListener(mAuthListener);
        }
    }


    @Override
    public  void onClick(View v)
    {
        switch (v.getId())
        {
            case R.id.sign_in_button:
                signIn();
                break;

        }
    }

    private void signIn() {
        Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
        startActivityForResult(signInIntent, 9001);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);

        if(requestCode == 9001) {
            GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
            handleSignInResult(result);
        }
    }

    private void handleSignInResult(GoogleSignInResult result) {
        Log.d("sign in event", "handleSignInResult:" + result.isSuccess());
        if (result.isSuccess()) {
            GoogleSignInAccount acct;
            acct = result.getSignInAccount();

            authFirebase(acct);


            if (acct != null) {
                Toast.makeText(getApplicationContext(), acct.getDisplayName() + " signed in", Toast.LENGTH_SHORT).show();
                flag = true;
            }


        }
    }

    private void authFirebase(GoogleSignInAccount acct) {
        //https://www.youtube.com/watch?v=MFWZLYFD8yI
        AuthCredential cred = GoogleAuthProvider.getCredential(acct.getIdToken(),null);
        mAuth.signInWithCredential(cred)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        Log.d("firebase Auth", "authenticated!!!!!!!!!!!");

                    }
                });
    }


    @Override
    protected void onNewIntent(Intent intent)
    {

        super.onNewIntent(intent);

        TextView text_view = (TextView) findViewById(R.id.jobNum);
        String jobNum = text_view.getText().toString();//job number entered

        text_view = (TextView) findViewById(R.id.quantity);
        String quant = text_view.getText().toString();//quantity of item to be taken

        text_view = (TextView) findViewById(R.id.binNum);
        String binNum = text_view.getText().toString();//the bin items are taken from
        int temp;
        temp =0;
        if(binNum.equals("")){
            temp +=1;}
        if(quant.equals("")){
            temp  += 1;}
        if(jobNum.equals("")){
            temp +=1;}
        if(flag && temp == 0 ) {
            Toast.makeText(getApplicationContext(), "sensing message", Toast.LENGTH_SHORT).show();

            if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(intent.getAction())) {
                Toast.makeText(getApplicationContext(), "sensed lock ", Toast.LENGTH_SHORT).show();
                NdefMessage[] msg;
                Parcelable[] rawMsg = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
                if (rawMsg != null) {
                    msg = new NdefMessage[rawMsg.length];
                    for (int i = 0; i < rawMsg.length; i++) {
                        msg[i] = (NdefMessage) rawMsg[i];
                    }
                    if (msg[0] != null) {
                        textDoor = "";
                        byte[] payload = msg[0].getRecords()[0].getPayload();
                        for (byte aPayload : payload) {
                            textDoor += (char) aPayload;
                        }
                        //Toast.makeText(getApplicationContext(), "Door : "+ textDoor, Toast.LENGTH_SHORT).show();
                        radio_button = (RadioButton) findViewById(R.id.radioButton);
                        radio_button.setEnabled(true);


                        DatabaseReference databaseRef;
                        Log.d("testing", "*********************** writing to database ********************************");
                        FirebaseApp app = FirebaseApp.getInstance();

                        FirebaseDatabase database = FirebaseDatabase.getInstance(app);


                    /*databaseRef = database.getReference("message");
                    databaseRef.push().setValue("message sent");//test message*/

                        //Toast.makeText(getApplicationContext(), "" + mAuth.getCurrentUser().getDisplayName(), Toast.LENGTH_SHORT).show();
                        databaseRef = database.getReference("users/" + mAuth.getCurrentUser().getDisplayName() + "/door");

                        //reads the values stored in the doors tab of their datasection

                        //https://www.youtube.com/watch?v=2FRBDXBs30Y
                        databaseRef.addListenerForSingleValueEvent(new ValueEventListener() {
                            @Override
                            public void onDataChange(DataSnapshot dataSnapshot) {
                                String doors = dataSnapshot.getValue(String.class);
                                if (doors != null) {
                                    radio_button = (RadioButton) findViewById(R.id.radioButton3);
                                    radio_button.setEnabled(true);
                                    Log.v("reading database", "doors" + doors);
                                    //Toast.makeText(getApplicationContext(), "" + doors, Toast.LENGTH_LONG).show();

                                    String temp = checkDoorPermission(textDoor, doors);
                                    getTimeStamp(temp);
                                }

                            }

                            @Override
                            public void onCancelled(DatabaseError databaseError) {
                                Toast.makeText(getApplicationContext(), "access denied no doors", Toast.LENGTH_LONG).show();

                            }
                        });


                    }
                }
            }
        }
    }


    private String checkDoorPermission(String door, String allowedDoors)
    {

        if(!(door.contains("nK"))) {
            Log.d("testing", "***********************checking door permission ********************************" + door);
            StringTokenizer tok = new StringTokenizer(allowedDoors, ",");
            for (int i = 0; i <= tok.countTokens() +1; i++) {
                String temp = tok.nextToken();

                //Toast.makeText(getApplicationContext(), "allowed to open door:" + temp + ":", Toast.LENGTH_SHORT).show();
                if (door.equals(temp)) {
                    doorHold = door;
                    return door;
                }

            }
            Toast.makeText(getApplicationContext(), "Access Denied not allowed to open door :" + door , Toast.LENGTH_LONG).show();
        }
        if(door.contains("nK"))
        {
            Log.d("newKey", "newkey"+ door);

            DatabaseReference databaseRef;
            FirebaseApp app = FirebaseApp.getInstance();
            Log.d("newKey", "*********************** writing new key to database ********************************");

            FirebaseDatabase database = FirebaseDatabase.getInstance(app);
            databaseRef = database.getReference("Doors/"+doorHold+"/TimeStamp");
            //Toast.makeText(getApplicationContext(), "Door : " + "new key"+ door, Toast.LENGTH_SHORT).show();
            door = door.replaceAll("nK","");
            int tempKey = Integer.parseInt(door);

            databaseRef.setValue(tempKey);
            openDoorButtonData();
            return "gotKey";
        }


        return "negative";
    }

    private void getTimeStamp(final String door) {
        if(!(door.contains("gotKey")) && !(door.contains("negative"))) {
            DatabaseReference databaseRef;
            FirebaseApp app = FirebaseApp.getInstance();

            Log.d("timeStamp", "doorHold"+ doorHold);
            FirebaseDatabase database = FirebaseDatabase.getInstance(app);
            databaseRef = database.getReference("Doors/"+doorHold+"/TimeStamp");


            //reads the values stored for the specific door

            //https://www.youtube.com/watch?v=2FRBDXBs30Y

            databaseRef.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(DataSnapshot dataSnapshot) {
                    int stamp = dataSnapshot.getValue(Integer.class);

                    infoToSend(stamp);

                }

                @Override
                public void onCancelled(DatabaseError databaseError) {
                    Toast.makeText(getApplicationContext(), "access denied not allowed to push", Toast.LENGTH_LONG).show();

                }
            });
        }



    }


    private void infoToSend(int stamp)
    {
        Log.d("infoSend", "ndef message with time stamp is ready");
        String temp =String.valueOf(stamp);//time stamp
        NdefRecord mimeRecord = NdefRecord.createMime("security/door",
                (temp).getBytes(Charset.forName("US-ASCII")));//send initial message to the arduino
        mNdefMessage = new NdefMessage(mimeRecord);
        mNfcAdapter.setNdefPushMessage(mNdefMessage,this,MainActivity.this);



    }
    private void openDoorButtonData()
    {
        FirebaseApp app = FirebaseApp.getInstance();

        FirebaseDatabase database = FirebaseDatabase.getInstance(app);

        DatabaseReference databaseRef;
        //Toast.makeText(MainActivity.this,"timeStamp sent", Toast.LENGTH_SHORT).show();
        Log.d("time stamp", "time stamp should be sent");
        databaseRef = database.getReference("Doors/"+doorHold+"/AccessedBy");
        //Toast.makeText(MainActivity.this,"pushing user", Toast.LENGTH_SHORT).show();
        TextView text_veiw = (TextView) findViewById(R.id.jobNum);
        String jobNum = text_veiw.getText().toString();//job number entered

        text_veiw = (TextView) findViewById(R.id.quantity);
        String quant = text_veiw.getText().toString();//quantity of item to be taken

        text_veiw = (TextView) findViewById(R.id.binNum);
        String binNum = text_veiw.getText().toString();//the bin items are taken from
        if(binNum.equals("")){
            binNum = "N/A";}
        if(quant.equals("")){
            quant = "N/A";}
        if(jobNum.equals("")){
            jobNum = "N/A";}

        //https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html
        Calendar date = Calendar.getInstance();
        SimpleDateFormat commaDate = new SimpleDateFormat("KK:mmaa,EEE,dd,MMM,yyyy");
        databaseRef.push().setValue("/%" + mAuth.getCurrentUser().getDisplayName() + "," + commaDate.format(date.getTime())+ ",jobNum:" + jobNum +",quantity:"+ quant + ",binNum" + binNum+ "%/");//sets the user who opened the door and the time and date

        radio_button= (RadioButton) findViewById(R.id.radioButton4);
        radio_button.setEnabled(true);
    }

    @Override
    public void onResume() {
        super.onResume();
        Log.d("resume","resuming");

        if (mNfcAdapter != null)
        {

            mNfcAdapter.setNdefPushMessage(mNdefMessage,this);
            radio_button= (RadioButton) findViewById(R.id.radioButton5);
            radio_button.setEnabled(true);

        }else{
            flag = false;
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        Log.d("onPause", "pausing");

        radio_button= (RadioButton) findViewById(R.id.radioButton);
        radio_button.setEnabled(false);
        radio_button= (RadioButton) findViewById(R.id.radioButton3);
        radio_button.setEnabled(false);
        radio_button= (RadioButton) findViewById(R.id.radioButton4);
        radio_button.setEnabled(false);
        radio_button= (RadioButton) findViewById(R.id.radioButton5);
        radio_button.setEnabled(false);

        if (mNfcAdapter != null) {
            mNfcAdapter.setNdefPushMessage(mNdefMessage, this);
            mNfcAdapter.setNdefPushMessageCallback(null, this);
        }
    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
        Log.d("connection", "connection failed");

    }
}
